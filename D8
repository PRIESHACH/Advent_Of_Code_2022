with open("D8.txt") as f:
    lines = f.read().strip().split('\n')

trees = []
for i in lines:
    trees.append(list(map(int, list(i))))

def p1(trees):
    def leftCheck(row, col):
        for i in range(0, col):
            if trees[row][i] >= trees[row][col]:
                return False
        return True

    def rightCheck(row, col):
        for i in range(col+1, len(trees[0])):
            if trees[row][i] >= trees[row][col]:
                return False
        return True

    def upCheck(row, col):
        for i in range(0,row):
            if trees[i][col] >= trees[row][col]:
                return False
        return True

    def downCheck(row, col):
        down = 0
        for i in range(row+1,len(trees)):
            if trees[i][col] >= trees[row][col]:
                return False
        return True

    visible = 0
    for row in range(1, len(trees)-1):
        for col in range(1, len(trees[0])-1):
            if leftCheck(row, col) or rightCheck(row, col) or upCheck(row, col) or downCheck(row, col):
                visible += 1
    visible += (len(trees)+len(trees[0])-2)*2
    return visible

def p2(trees):
    def leftCount(row, col):
        left = 0
        for i in range(col-1, -1, -1):
            if trees[row][i] < trees[row][col]:
                left += 1
            else:
                return left+1
        return left

    def rightCount(row, col):
        right = 0
        for i in range(col+1, len(trees[0])):
            if trees[row][i] < trees[row][col]:
                right += 1
            else:
                return right+1
        return right

    def upCount(row, col):
        up = 0
        for i in range(row-1, -1, -1):
            if trees[i][col] < trees[row][col]:
                up += 1
            else:
                return up+1
        return up

    def downCount(row, col):
        down = 0
        for i in range(row+1,len(trees)):
            if trees[i][col] < trees[row][col]:
                down += 1
            else:
                return down+1
        return down
    maximum = 0
    for row in range(1, len(trees)-1):
        for col in range(1, len(trees[0])-1):
            maximum = max(maximum, leftCount(row, col) * rightCount(row, col) * upCount(row, col) * downCount(row, col))
    return maximum

print(p1(trees))
print(p2(trees))
